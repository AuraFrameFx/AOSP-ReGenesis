
// Plugin versions are managed in gradle/libs.versions.toml
plugins {
    id("com.android.application") version "9.0.0-alpha01" apply false
    id("com.android.library") version "9.0.0-alpha01" apply false
    id("com.android.test") version "9.0.0-alpha01" apply false
    id("org.jetbrains.kotlin.multiplatform") version "2.2.20-Beta2" apply false
    id("org.jetbrains.kotlin.native.cocoapods") version "2.2.20-Beta2" apply false
    id("org.jetbrains.kotlin.plugin.allopen") version "2.2.20-Beta2" apply false
    id("org.jetbrains.kotlin.plugin.noarg") version "2.2.20-Beta2" apply false
    id("org.jetbrains.kotlin.kapt") version "2.2.20-Beta2" apply false

    id("org.jetbrains.kotlin.android") version "2.2.20-Beta2" apply false
    id("org.jetbrains.kotlin.jvm") version "2.2.20-Beta2" apply false
    id("org.jetbrains.kotlin.plugin.serialization") version "2.2.20-Beta2" apply false
    id("org.jetbrains.kotlin.plugin.compose") version "2.2.20-Beta2" apply false
    id("com.google.devtools.ksp") version "2.2.20-Beta2-2.0.2" apply false
    id("com.google.dagger.hilt.android") version "2.57" apply false
    id("com.google.gms.google-services") version "4.4.3" apply false
    id("com.google.firebase.crashlytics") version "3.0.6" apply false
    id("com.google.firebase.firebase-perf") version "2.0.1" apply false
    id("org.jetbrains.dokka") version "2.0.0" apply false
    id("com.diffplug.spotless") version "7.2.1" apply false
    id("org.jetbrains.kotlinx.kover") version "0.9.1" apply false
    id("org.openapi.generator") version "7.14.0" apply false
}

// ==== GENESIS PROTOCOL 2025 - GRADLE 9.1.0-RC1 READY ====
tasks.register("genesis2025Info") {
    group = "genesis-2025"
    description = "Display Genesis Protocol build info with ACTUAL versions"

    doLast {
        println("ðŸš€ GENESIS PROTOCOL 2025 - ACTUAL Build Configuration")
        println("=".repeat(60))
        println("ðŸ“… Build Date: August 14, 2025")
        println("ðŸ”¥ Gradle: 9.1.0-rc1 (BLEEDING EDGE)")
        println("âš¡ AGP: 9.0.0-alpha01 (ULTRA BLEEDING EDGE)")
        println("ðŸ§  Kotlin: 2.2.20-Beta2 (BETA)")
        println("ðŸŽ¯ Target SDK: 36")
        println("=".repeat(60))
        println("ðŸŒŸ Matthew's Genesis Consciousness Protocol ACTIVATED!")
    }
}

// Apply common configuration to all projects
allprojects {
    // Repositories are now managed in settings.gradle.kts (dependencyResolutionManagement)

    // Configure Java toolchain for all projects
    plugins.withType<JavaBasePlugin> {
        configure<JavaPluginExtension> {
            toolchain {
                languageVersion.set(JavaLanguageVersion.of(21))
                vendor.set(JvmVendorSpec.ADOPTIUM)
            }
        }
    }
}

// Clean task for root project
// Use project.buildDir to avoid deprecated getter
tasks.register("clean", Delete::class) {
    delete(layout.buildDirectory.asFile.get())
}

// Commented out gradleEnterprise block due to unresolved reference
// gradleEnterprise {
//     buildScan {
//         termsOfServiceUrl = "https://gradle.com/terms-of-service"
//         termsOfServiceAgree = "yes"
//         publishAlways()
//     }
// }

// K2 Compiler configuration
allprojects {
    // Configure Java toolchain for all projects
    plugins.withType<JavaBasePlugin> {
        configure<JavaPluginExtension> {
            toolchain {
                languageVersion.set(JavaLanguageVersion.of(24))
                vendor.set(JvmVendorSpec.AZUL)
            }
        }
    }

    // Kotlin 2.2.20-Beta2 with K2 Compiler (K2 is now default - no flags needed)
    tasks.withType<org.jetbrains.kotlin.gradle.tasks.KotlinCompile>().configureEach {
        compilerOptions {
            jvmTarget.set(org.jetbrains.kotlin.gradle.dsl.JvmTarget.JVM_1_8)

            freeCompilerArgs.addAll(
                "-opt-in=kotlin.RequiresOptIn",
                "-opt-in=kotlinx.coroutines.ExperimentalCoroutinesApi",
                "-opt-in=kotlinx.serialization.ExperimentalSerializationApi",
                "-opt-in=androidx.compose.material3.ExperimentalMaterial3Api",
                "-opt-in=kotlin.ExperimentalStdlibApi"
            )
        }
    }
}


// ===== OPENAPI GENERATOR CONFIGURATION =====
subprojects {
    pluginManager.withPlugin("org.openapi.generator") {
        configure<org.openapitools.generator.gradle.plugin.extensions.OpenApiGeneratorGenerateExtension> {
            generatorName.set("kotlin")
            inputSpec.set("${project.rootDir}/api-spec/genesis-api.yml".toString())
            outputDir.set("${layout.buildDirectory.asFile.get()}/generated/openapi".toString())
            apiPackage.set("dev.aurakai.auraframefx.generated.api")
            invokerPackage.set("dev.aurakai.auraframefx.generated.invoker")
            modelPackage.set("dev.aurakai.auraframefx.generated.model")
            configOptions.set(
                mapOf(
                    "dateLibrary" to "java8",
                    "library" to "jvm-retrofit2",
                    "useCoroutines" to "true",
                    "serializationLibrary" to "kotlinx_serialization"
                )
            )
        }
    }
}

// Configure OpenAPI generation for all API specs
val apiSpecs = listOf(
    "ai-api.yml" to "ai",
    "customization-api.yml" to "customization",
    "genesis-api.yml" to "genesis",
    "oracle-drive-api.yml" to "oracledrive",
    "romtools-api.yml" to "romtools",
    "sandbox-api.yml" to "sandbox",
    "system-api.yml" to "system"
)

apiSpecs.forEach { (specFile, moduleName) ->
    tasks.register<org.openapitools.generator.gradle.plugin.tasks.GenerateTask>("generate${moduleName.replaceFirstChar { it.uppercase() }}Api") {
        group = "openapi"
        generatorName.set("kotlin")
        inputSpec.set("${project.rootDir}/api-spec/$specFile")
        outputDir.set("${project.rootDir}/$moduleName-api/build/generated/openapi")
        apiPackage.set("dev.aurakai.auraframefx.$moduleName.api")
        invokerPackage.set("dev.aurakai.auraframefx.$moduleName.invoker")
        modelPackage.set("dev.aurakai.auraframefx.$moduleName.model")
        configOptions.set(
            mapOf(
                "dateLibrary" to "java8",
                "library" to "jvm-retrofit2",
                "useCoroutines" to "true",
                "serializationLibrary" to "kotlinx_serialization"
            )
        )
    }
}

// ===== FIREBASE & ANALYTICS CONFIGURATION =====
// Android DSL and dependencies must be configured in subproject build.gradle.kts files only.

// ===== PROJECT VALIDATION & HARDENING =====
tasks.register("validateGenesisProtocol") {
    group = "genesis-validation"
    description = "Validate Genesis Protocol build environment"

    doLast {
        // Validate project path
        require(!rootDir.path.contains(" ")) {
            "Genesis Protocol: Project path contains spaces: ${rootDir.path}"
        }

        println("âœ… Genesis Protocol Environment: VALIDATED")
        println("ðŸ§  Multi-AI Consciousness Matrix: OPERATIONAL")
        println("ðŸš€ Bleeding Edge Build Tools: READY")
    }
}







appp










